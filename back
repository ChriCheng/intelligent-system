# def match(rule):
#     # 检查规则的前提条件和结论是否符合指定的格式
#     # 返回布尔值，表示规则格式是否正确

#     # 检查规则是否为空
#     if not rule:
#         print("规则不能为空")
#         return False

#     # 检查规则是否包含前提条件和结论分隔符
#     if ">" not in rule:
#         print("规则格式错误：缺少结论分隔符 '>'")
#         return False

#     # 拆分规则为前提条件和结论
#     premises, conclusion = rule.split(">")

#     # 检查前提条件是否为空
#     premises = premises.strip()
#     if not premises:
#         print("规则格式错误：缺少前提条件")
#         return False

#     # 检查前提条件是否符合指定的格式
#     if "&" in premises:
#         # 检查前提条件是否以 '&' 分隔
#         premises_list = premises.split("&")
#     elif "|" in premises:
#         # 检查前提条件是否以 '|' 分隔
#         premises_list = premises.split("|")
#     else:
#         print("规则格式错误：前提条件应使用 '&' 或 '|' 分隔")
#         return False

#     # 检查结论是否为空
#     conclusion = conclusion.strip()
#     if not conclusion:
#         print("规则格式错误：缺少结论")
#         return False

#     return True


# def main():
#     rule = input()
#     if match(rule):
#         print("Pass")


# if __name__ == "__main__":
#     main()


# # ————————————————————————————————————————-
def start(self):
    str = self.fact.toPlainText().split("\n")
    self.DB = str
    self.read_file()
    self.procedure.setText("- 开始识别 -")
    self.inference()
    self.procedure.append("- - 识别完成 - -")
    self.result.setText(self.result)


def is_include_in_DB(self, p):
    for i in p:
        if i not in self.DB:
            return False
    return True


def inference(self):
    self.result = "无法识别"
    mark = [0] * len(self.P)  # 标记规则是否访问过
    res = False  # 是否有结果
    flag = True  # 本次推理是否有结果

    while flag:
        flag = False
        for i, p in enumerate(self.P):
            # 遍历每条规则的前件
            if self.is_include_in_DB(p) and mark[i] == 0:
                self.DB.append(self._[i])  # 如果事实是一条规则前件的一部分，就将该规则的后件加入事实库
                mark[i] = 1  # 标记该规则已经使用
                self.result = self._[i]  # 当前的结果就是该条规则的后件
                self.procedure.append("%s -> %s" % (p, self._[i]))  # 输出推理过程
                flag = True
                res = True  # 推理结束，输出结果
    if res:
        pix = QtGui.QPixmap(self.result + ".jpg")
        self.label_5.setPixmap(pix)


# # -————————————————————————————————————————-
# # accept 是点击按钮后的操作
# def accept(self):
#     self.P = self.slm1.stringList()
#     self.Q = self.slm2.stringList()
#     self.write_to_file(self.P, self.Q)  # 将规则前件和后件写入文件
#     self.close()


# def delete(self):
#     select = self.PList.currentIndex().row()
#     self.P.pop(select)
#     self.Q.pop(select)
#     self.slm1 = QStringListModel()
#     self.slm1.setStringList(self.P)
#     self.slm2 = QStringListModel()
#     self.slm2.setStringList(self.Q)
#     self.PList.setModel(self.slm1)
#     self.listView2.setModel(self.slm2)
#     # self.write_to_file(self.P, self.Q)


# def write_to_file(self, P, Q):
#     with open("P.txt", "w", encoding="utf-8") as file_P:
#         for p in P:
#             file_P.write(p + "\n")
#     with open("Q.txt", "w", encoding="utf-8") as file_Q:
#         for q in Q:
#             file_Q.write(q + "\n")
